Необходимо создать БД, удовлетворяющую условиям строки подключения: Server=localhost;Port=5432;User Id=postgres;Password=123;Database=enterprise;
Или изменить саму строку подключения на ту, которая подходит вашей схеме.

Далее необходимо создать три таблицы: Departments, Employees, JobTitles.
Скрипты для создания:

Departments:

-- Table: public.Departments

-- DROP TABLE IF EXISTS public."Departments";

CREATE TABLE IF NOT EXISTS public."Departments"
(
    "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "ParentID" integer NOT NULL,
    "ParentName" text COLLATE pg_catalog."default" NOT NULL,
    "ManagerID" integer NOT NULL,
    "ManagerName" text COLLATE pg_catalog."default" NOT NULL,
    "Name" text COLLATE pg_catalog."default" NOT NULL,
    "Phone" text COLLATE pg_catalog."default" NOT NULL,
    "NotValid" boolean NOT NULL DEFAULT false,
    CONSTRAINT "PK_Departments" PRIMARY KEY ("ID")
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Departments"
    OWNER to postgres;

Employees:

-- Table: public.Employees

-- DROP TABLE IF EXISTS public."Employees";

CREATE TABLE IF NOT EXISTS public."Employees"
(
    "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "DepartmentID" integer NOT NULL,
    "DepartmentName" text COLLATE pg_catalog."default" NOT NULL,
    "Fullname" text COLLATE pg_catalog."default" NOT NULL,
    "Login" text COLLATE pg_catalog."default" NOT NULL,
    "Password" text COLLATE pg_catalog."default" NOT NULL,
    "JobTitle" integer NOT NULL,
    "JobDescription" text COLLATE pg_catalog."default" NOT NULL,
    "NotValid" boolean NOT NULL DEFAULT false,
    CONSTRAINT "PK_Employees" PRIMARY KEY ("ID")
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Employees"
    OWNER to postgres;

JobTitles:

-- Table: public.JobTitles

-- DROP TABLE IF EXISTS public."JobTitles";

CREATE TABLE IF NOT EXISTS public."JobTitles"
(
    "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "Name" text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "PK_JobTitles" PRIMARY KEY ("ID")
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."JobTitles"
    OWNER to postgres;

Запросы были сгенерированы с помощью миграции Code-First.

Далее необходимо создать 4 хранимые процедуры для проставления связей между таблицами (было принято решение делать это на стороне БД, 
т.к. EF производит слишком большую нагрузку и работает медленнее)

Проставление ID отделов в таблицу работников:

-- PROCEDURE: public.updatedepartmentids()

-- DROP PROCEDURE IF EXISTS public.updatedepartmentids();

CREATE OR REPLACE PROCEDURE public.updatedepartmentids(
	)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN

	with "t2" as (
	select "Name", "Departments"."ID" as "dID", "Fullname" from "Departments" join
	"Employees" on "Departments"."Name" = "DepartmentName"
	)
	update "Employees" 
	set "DepartmentID" = "t2"."dID"
	from "t2"
	where "t2"."Fullname" = "Employees"."Fullname";
	
	update "Employees"
	set "NotValid" = true
	where "DepartmentID" = 0 and 
	(SELECT EXISTS (select * from "Departments") limit 1);
END; 
$BODY$;
ALTER PROCEDURE public.updatedepartmentids()
    OWNER TO postgres;


Проставление родительских отделов:

-- PROCEDURE: public.updateinnerdepid()

-- DROP PROCEDURE IF EXISTS public.updateinnerdepid();

CREATE OR REPLACE PROCEDURE public.updateinnerdepid(
	)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN

	with "t3"
	AS (
	select "d1"."Name" as d1Name, "d1"."ID" as d1ID, "d2"."Name" as d2Name, "d2"."ID" as d2ID from "Departments" as d1 join
	"Departments" as d2 on "d1"."ParentName" = "d2"."Name"
	)
	update "Departments" 
	set "ParentID" = "t3"."d2id"
	from "t3"
	where "t3"."d1id" = "Departments"."ID";
END; 
$BODY$;
ALTER PROCEDURE public.updateinnerdepid()
    OWNER TO postgres;

Проставление ID должностей:

-- PROCEDURE: public.updatejobtitles()

-- DROP PROCEDURE IF EXISTS public.updatejobtitles();

CREATE OR REPLACE PROCEDURE public.updatejobtitles(
	)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	with "t4"
	AS (
	select "Employees"."JobDescription", "JobTitles"."ID" as jid, "JobTitles"."Name" from "Employees" join
	"JobTitles" on "Employees"."JobDescription" = "JobTitles"."Name"
	)
		update "Employees" 
	set "JobTitle" = "t4"."jid"
	from "t4"
	where "t4"."Name" = "Employees"."JobDescription";
	
	update "Employees"
	set "NotValid" = true
	where "JobTitle" = 0 and
	(SELECT EXISTS (select * from "JobTitles") limit 1);
END; 
$BODY$;
ALTER PROCEDURE public.updatejobtitles()
    OWNER TO postgres;

Проставление ID менеджеров:

-- PROCEDURE: public.updatemanagerids()

-- DROP PROCEDURE IF EXISTS public.updatemanagerids();

CREATE OR REPLACE PROCEDURE public.updatemanagerids(
	)
LANGUAGE 'plpgsql'
AS $BODY$
BEGIN

	with "t1"
	AS (
	select "Name", "ManagerName", "Fullname", "Employees"."ID" as "mID" from "Departments" join
	"Employees" on "Departments"."ManagerName" = "Fullname"
	)
	update "Departments" 
	set "ManagerID" = "t1"."mID"
	from "t1"
	where "t1"."Fullname" = "Departments"."ManagerName";

	update "Departments"
	set "NotValid" = true
	where "ManagerID" = 0 and
	(SELECT EXISTS (select * from "Employees") limit 1);
END; 
$BODY$;
ALTER PROCEDURE public.updatemanagerids()
    OWNER TO postgres;
